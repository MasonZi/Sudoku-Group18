Index: sudoku_generator.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+># Group 18\r\nimport math\r\nimport random\r\n# import pygame\r\n\r\n\r\nclass SudokuGenerator:\r\n    def __init__(self, row_length, removed_cells):\r\n        self.row_length = row_length\r\n        self.removed_cells = removed_cells\r\n        self.board = [[0 for _ in range(row_length)] for _ in range(row_length)]\r\n        self.box_length = int(math.sqrt(self.row_length))\r\n\r\n    def get_board(self):\r\n        return self.board\r\n\r\n    def print_board(self):\r\n        for row in self.board:\r\n            print(\" \".join(str(cell) for cell in row))\r\n\r\n    def valid_in_row(self, row, num):\r\n        if num in self.board[row]:\r\n            return False\r\n        else:\r\n            return True\r\n\r\n    def valid_in_col(self, col, num):\r\n        for row in range(self.row_length):\r\n            if self.board[row][col] == num:\r\n                return False\r\n        return True\r\n\r\n    def valid_in_box(self, row_start, col_start, num):\r\n        for i in range(row_start, row_start + 3):\r\n            for j in range(col_start, col_start + 3):\r\n                if self.board[i][j] == num:\r\n                    return False\r\n        return True\r\n\r\n    def is_valid(self, row, col, num):\r\n        return (self.valid_in_row(row, num) and\r\n                self.valid_in_col(col, num) and\r\n                self.valid_in_box(row - row % 3, col - col % 3, num))\r\n\r\n    def fill_box(self, row_start, col_start):\r\n        single_digits = [1, 2, 3, 4, 5, 6, 7, 8, 9]\r\n        random.shuffle(single_digits)  # Shuffle digits 1-9\r\n\r\n        index_digit = 0\r\n        for row in range(row_start, row_start + self.box_length):\r\n            for col in range(col_start, col_start + self.box_length):\r\n                self.board[row][col] = single_digits[index_digit]\r\n                index_digit += 1\r\n\r\n    def fill_diagonal(self):\r\n        for i in range(0, self.row_length, self.box_length):\r\n            self.fill_box(i, i)\r\n\r\n    def fill_remaining(self, row, col):  # Do not change\r\n        if (col >= self.row_length and row < self.row_length - 1):\r\n            row += 1\r\n            col = 0\r\n        if row >= self.row_length and col >= self.row_length:\r\n            return True\r\n        if row < self.box_length:\r\n            if col < self.box_length:\r\n                col = self.box_length\r\n        elif row < self.row_length - self.box_length:\r\n            if col == int(row // self.box_length * self.box_length):\r\n                col += self.box_length\r\n        else:\r\n            if col == self.row_length - self.box_length:\r\n                row += 1\r\n                col = 0\r\n                if row >= self.row_length:\r\n                    return True\r\n        \r\n        for num in range(1, self.row_length + 1):\r\n            if self.is_valid(row, col, num):\r\n                self.board[row][col] = num\r\n                if self.fill_remaining(row, col + 1):\r\n                    return True\r\n                self.board[row][col] = 0\r\n        return False\r\n\r\n    def fill_values(self):\r\n        self.fill_diagonal()\r\n        self.fill_remaining(0, self.box_length)\r\n\r\n    def remove_cells(self):\r\n        cells = [(r, c) for r in range(self.row_length) for c in range(self.row_length)]\r\n        random.shuffle(cells)\r\n\r\n        cells_to_remove = cells[:self.removed_cells]\r\n        for (row, col) in cells_to_remove:\r\n            if self.board[row][col] != 0:\r\n                self.board[row][col] = 0\r\n\r\n\r\n'''\r\nDO NOT CHANGE\r\nProvided for students\r\nGiven a number of rows and number of cells to remove, this function:\r\n1. creates a SudokuGenerator\r\n2. fills its values and saves this as the solved state\r\n3. removes the appropriate number of cells\r\n4. returns the representative 2D Python Lists of the board and solution\r\n\r\nParameters:\r\nsize is the number of rows/columns of the board (9 for this project)\r\nremoved is the number of cells to clear (set to 0)\r\n\r\nReturn: list[list] (a 2D Python list to represent the board)\r\n'''\r\n\r\n\r\ndef generate_sudoku(size, removed):\r\n    sudoku = SudokuGenerator(size, removed)\r\n    sudoku.fill_values()\r\n    board = sudoku.get_board()\r\n    sudoku.remove_cells()\r\n    board = sudoku.get_board()\r\n    return board\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/sudoku_generator.py b/sudoku_generator.py
--- a/sudoku_generator.py	(revision b86cbcfd4fa638c206c98a5dd4b1e5b5ad5c7cdc)
+++ b/sudoku_generator.py	(date 1722991523099)
@@ -1,4 +1,4 @@
-# Group 18
+# Group 18 Sudoku Project
 import math
 import random
 # import pygame
